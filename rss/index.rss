<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Araceli Yanez</title><description>Thoughts, stories and ideas.</description><link>http://localhost:2370/</link><image><url>http://localhost:2370/favicon.png</url><title>Araceli Yanez</title><link>http://localhost:2370/</link></image><generator>Ghost 2.31</generator><lastBuildDate>Mon, 30 Sep 2019 15:36:44 GMT</lastBuildDate><atom:link href="http://localhost:2370/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Hardware Data Proxy</title><description>A proxy between a Java and Windows Server application. Designed to improve the type of data available to users in an automated fashion.</description><link>http://localhost:2370/hardware-data-proxy-server/</link><guid isPermaLink="false">5d866f9633de961cd064cb21</guid><category>C#</category><dc:creator>Araceli Yanez</dc:creator><pubDate>Sat, 21 Sep 2019 18:44:44 GMT</pubDate><media:content url="http://localhost:2370/content/images/2019/09/C-Sharp.png" medium="image"/><content:encoded>&lt;img src="http://localhost:2370/content/images/2019/09/C-Sharp.png" alt="Hardware Data Proxy"&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt;&lt;em&gt; I cannot publicly disclose the code for this project.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Our lab has to maintain a large inventory of various Automated Test Equipment. While the equipment was identical, there were multiple ways in which the equipment could be used that either extended or limited its capabilities. When a customer wanted to know what type of equipment they were working with, they could walk out into the lab and see. With a growing population of remote workers, this was starting to become a problem.&lt;/p&gt;&lt;p&gt;We had tooling in Java that allowed users to see the type of equpiment available, but the data was hard-coded and needed to be updated by someone daily. Hello, human error! Fortunately, there was another system with an API that would allow us to get this information automatically.&lt;/p&gt;&lt;p&gt;I created a client/server proxy in C# that allowed us to query a WCF server with various information about the equipment, then serve that data to our Java tooling. Queries to the WCF server were naturally slow, so I made further optimizations to sensibly cache data and thread requests.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</content:encoded></item><item><title>Dynamic Milestone Timeline</title><description>Consolidates milestones from various teams and projects into one timeline. Allows team members to foresee upcoming work based on these dependencies.</description><link>http://localhost:2370/dynamic-timeline/</link><guid isPermaLink="false">5d866f4a33de961cd064cb18</guid><category>JavaScript</category><category>Python</category><dc:creator>Araceli Yanez</dc:creator><pubDate>Sat, 21 Sep 2019 18:43:58 GMT</pubDate><media:content url="http://localhost:2370/content/images/2019/09/Untitled-design-1.png" medium="image"/><content:encoded>&lt;img src="http://localhost:2370/content/images/2019/09/Untitled-design-1.png" alt="Dynamic Milestone Timeline"&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt;&lt;em&gt; I cannot publicly disclose the code for this project.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Our team had to manage a large quantity of projects and for each of the projects, multiple milestones. In addition to that, the milestones moved almost daily. As the Scrum Master for our team, I noticed that we kept running into related issues with not having the correct dates for milestones, forgetting them, and/or not being able to forecast future work easily during sprint planning. We needed to alleviate this problem.&lt;/p&gt;&lt;p&gt;In terms of resources to help us, the teams we depended on had started to maintain spreadsheets for their deliverable dates that directly impacted our milestones. Extracting these dates and formatting them in a different way would allow us to more accurately assess our upcoming work. Normally, extracting data from non-standard dependencies is not recommended, but the rewards would far outweigh risk and maintenance in this case.&lt;/p&gt;&lt;p&gt;I created a milestone timeline in Google Apps Script that generated a rolling 40-week window of time, with milestones for each project. Dependency data was queried periodically with a Python script, then uploaded to the timeline. This timeline ended up being used quite frequently for sprint and quarterly planning. It also helped us identify conflicts and large influxes of work.&lt;/p&gt;</content:encoded></item><item><title>Test Program Transformer</title><description>Converts a complicated, standardized relationship of files and attributes into a report for readability and diffing purposes.</description><link>http://localhost:2370/test-program-transformer/</link><guid isPermaLink="false">5d866f1b33de961cd064cb0f</guid><category>Java</category><dc:creator>Araceli Yanez</dc:creator><pubDate>Sat, 21 Sep 2019 18:42:44 GMT</pubDate><media:content url="http://localhost:2370/content/images/2019/09/Java.png" medium="image"/><content:encoded>&lt;img src="http://localhost:2370/content/images/2019/09/Java.png" alt="Test Program Transformer"&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt;&lt;em&gt; I cannot publicly disclose the code for this project.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;For some background, test programs are a collection of files that are  used by Automated Test Equipment, or equipment that is used when testing  integrated circuits in a production environment. Multiple companies use  this type of equipment. My team created test programs as part of our  support portfolio.&lt;/p&gt;&lt;p&gt;The objective for the transformer was to take two test programs with completely different structures and format an output that could be easily compared in a diff tool. I really wanted to be diligent about the design of this application, more to maintain the integrity of the data to compare, than the programming approach. The design went through a few reviews from multiple types of stakeholders and software engineers. I ended up selecting Java for its cross-platform capabilities and the future option of importing this tool into other existing Java applications in our portfolio.&lt;/p&gt;</content:encoded></item><item><title>Test Program Utilities</title><description>A custom collection of Google Apps and Python scripts designed to optimize a frequently used spreadsheet workflow.</description><link>http://localhost:2370/testprogramutilities/</link><guid isPermaLink="false">5d866edc33de961cd064cb06</guid><category>JavaScript</category><category>Python</category><dc:creator>Araceli Yanez</dc:creator><pubDate>Sat, 21 Sep 2019 18:41:47 GMT</pubDate><media:content url="http://localhost:2370/content/images/2019/09/Untitled-design.png" medium="image"/><content:encoded>&lt;img src="http://localhost:2370/content/images/2019/09/Untitled-design.png" alt="Test Program Utilities"&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt;&lt;em&gt; I cannot publicly disclose the code for this project.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;For some background, test programs are a collection of files that are used by Automated Test Equipment, or equipment that is used when testing integrated circuits in a production environment. Multiple companies use this type of equipment. My team created test programs as part of our support portfolio.&lt;/p&gt;&lt;p&gt;Test programs need to be precise and custom, for the most accurate testing experience. Spreadsheets are the best medium for this type of work, since it is just a combination of specific data formatted into a certain structure. Doing this work could be repetitive and inefficient.&lt;/p&gt;&lt;p&gt;Within my first couple of test programs, I was already bookmarking issues that could be fixed: a single change causing numerous cascading changes, manually collecting certain pieces of data from multiple tabs into one tab,  certain structures being conceptually identical across different projects, etc. We began looking for ways to improve this process, which represented the bulk of our team's work.&lt;/p&gt;&lt;p&gt;TestProgramUtilties is a Google Apps Script library written in JavaScript. It hooks into a Google Sheet to automate a lot of the aforementioned issues. Overall, it has shortened the process time by about 20%.&lt;/p&gt;</content:encoded></item><item><title>Araceli Yanez Website</title><description>My personal website. A collection exploring WebGL, CSS tricks, and design. Built on top of Ghost CMS.</description><link>http://localhost:2370/araceliyanezdotcom/</link><guid isPermaLink="false">5d842b9d8deb7f039c8b6321</guid><category>JavaScript</category><dc:creator>Araceli Yanez</dc:creator><pubDate>Fri, 20 Sep 2019 01:32:56 GMT</pubDate><media:content url="http://localhost:2370/content/images/2019/09/Screen-Shot-2019-09-28-at-1.27.33-PM.png" medium="image"/><content:encoded>&lt;img src="http://localhost:2370/content/images/2019/09/Screen-Shot-2019-09-28-at-1.27.33-PM.png" alt="Araceli Yanez Website"&gt;&lt;p&gt;As someone at the start of a career transition into web development, I clearly needed a portfolio. I wanted to go for something bright, monotone, and minimalistic.&lt;/p&gt;&lt;p&gt;Some fun concepts and tools that I used along the way: Ghost CMS, CSS flexbox, simple responsive design, and WebGL graphics. Having a CMS was a top requirement - it was important to me to have a separation of concerns between content and design, even if I didn't expect a lot of content. It's kind of clunky to directly edit your posts in static HTML documents. The Ghost theme itself is my own custom design, using some minor Handlebars to create the pages. The end result gets converted over into a static website (funnily enough) using Gatsby and then gets posted to my GitHub user page.&lt;/p&gt;&lt;p&gt;Icons used on the website are made by &lt;a href="https://www.flaticon.com/authors/dave-gandy"&gt;Dave Gandy&lt;/a&gt;, &lt;a href="https://www.flaticon.com/authors/chanut"&gt;Chanut&lt;/a&gt;, &lt;a href="https://www.flaticon.com/authors/freepik"&gt;Freepik&lt;/a&gt;, &lt;a href="https://www.flaticon.com/authors/surang"&gt;surang&lt;/a&gt;, and &lt;a href="https://www.flaticon.com/authors/chris-veigt"&gt;Chris Veigt&lt;/a&gt; from &lt;a href="https://www.flaticon.com/"&gt;www.flaticon.com&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title>About</title><description>&lt;p&gt;The day our family got our first personal computer in the 2000s was the day that began my 10+ year interest in web development. I remember exploring the web - when AOL dial-up was all the rage and social media in its infancy - and having overflowing curiosity about how&lt;/p&gt;</description><link>http://localhost:2370/about/</link><guid isPermaLink="false">5d842b348deb7f039c8b6318</guid><dc:creator>Araceli Yanez</dc:creator><pubDate>Fri, 20 Sep 2019 01:29:55 GMT</pubDate><content:encoded>&lt;p&gt;The day our family got our first personal computer in the 2000s was the day that began my 10+ year interest in web development. I remember exploring the web - when AOL dial-up was all the rage and social media in its infancy - and having overflowing curiosity about how websites were made, then figuring it out on my own. I am now looking forward to the next step of my journey.&lt;/p&gt;</content:encoded></item></channel></rss>